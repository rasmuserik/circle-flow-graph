// Generated by CoffeeScript 1.6.3
(function() {
  var circlesPerLine, ctx, cx0, cx1, cy0, cy1, data, end, entry, entryDir, entryPoint, exitDir, exitPoint, height, i, id, key, odd, radius, size, t0, t1, val, width, x, x0, x1, y, y0, y1, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

  t0 = +new Date();

  width = canvas.width;

  height = canvas.width;

  size = 60;

  radius = size * .40;

  ctx = canvas.getContext("2d");

  circlesPerLine = 3;

  data = {
    a: [],
    b: [],
    c: ["a", "b"],
    d: ["c", "b"],
    e: ["c", "b"],
    f: ["d", "e"],
    g: ["d", "c"],
    h: [],
    i: ["f", "g", "h"],
    j: ["c"],
    k: ["d", "c"],
    l: ["f", "g", "h"],
    m: ["d", "c"],
    n: [],
    o: ["l", "n", "g"],
    p: ["l", "o"],
    q: ["p"],
    r: ["n", "o"],
    s: ["r", "q", "p"],
    t: ["r", "g"],
    u: ["s"],
    v: ["r", "t"],
    w: ["s", "u"],
    x: ["r", "u", "v", "t", "f", "s"],
    y: ["t", "x"],
    z: ["w"]
  };

  for (key in data) {
    val = data[key];
    data[key] = {
      "in": val,
      out: [],
      id: key
    };
  }

  for (key in data) {
    val = data[key];
    _ref = val["in"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      data[id].out.push(key);
    }
  }

  x = 0;

  y = 0;

  odd = false;

  for (key in data) {
    val = data[key];
    val.x = x;
    val.y = y;
    x += size;
    if (x + size > width) {
      odd = !odd;
      x = odd ? size / 2 : 0;
      y = y + size * 1.2;
    }
  }

  exitPoint = function(data) {
    var t;
    t = radius * Math.sqrt(.5);
    return [data.x + size / 2 + t, data.y + size / 2 + t];
  };

  exitDir = function(data) {
    return [data.x + size / 2 + radius * 1.5, data.y + size / 2 + radius * 1.5];
  };

  entryDir = function(data, i, n) {
    var _ref1, _ref2;
    _ref1 = entryPoint(data, i, n), x = _ref1[0], y = _ref1[1];
    _ref2 = [x - (data.x + width / 2), y - (data.y + width / 2)], x = _ref2[0], y = _ref2[1];
    return [(data.x + width / 2) + 1.15 * x, (data.y + width / 2) + 1.15 * y];
  };

  entryPoint = function(data, i, n) {
    var a, t, w;
    t = radius * Math.sqrt(.5);
    w = 2;
    a = Math.PI * 1.25 + w * (i + 1) / (n + 1) - w / 2;
    y = Math.sin(a);
    x = Math.cos(a);
    console.log(data);
    console.log(x, y, a, w, t, i, n);
    [data.x + size / 2 - t, data.y + size / 2 - t];
    return [data.x + size / 2 + x * radius, data.y + size / 2 + y * radius];
  };

  ctx.lineWidth = 2;

  for (key in data) {
    end = data[key];
    for (i = _j = 0, _ref1 = end["in"].length - 1; _j <= _ref1; i = _j += 1) {
      val = data[end["in"][i]];
      console.log(val, end);
      ctx.beginPath();
      ctx.strokeStyle = hashcolor.intToColor(hashcolor.val(val.id));
      _ref2 = exitPoint(val), x0 = _ref2[0], y0 = _ref2[1];
      _ref3 = exitDir(val), cx0 = _ref3[0], cy0 = _ref3[1];
      entry = end;
      _ref4 = entryPoint(entry, i, end["in"].length), x1 = _ref4[0], y1 = _ref4[1];
      _ref5 = entryDir(entry, i, end["in"].length), cx1 = _ref5[0], cy1 = _ref5[1];
      ctx.moveTo(x0, y0);
      ctx.quadraticCurveTo(cx0, cy0, (cx0 + cx1) / 2, (cy0 + cy1) / 2);
      ctx.quadraticCurveTo(cx1, cy1, x1, y1);
      ctx.stroke();
    }
  }

  for (key in data) {
    val = data[key];
    ctx.beginPath();
    ctx.arc(val.x + size / 2, val.y + size / 2, radius, 0, Math.PI * 2);
    ctx.fillStyle = "rgba(255,255,255,0.8)";
    ctx.fill();
    ctx.strokeStyle = hashcolor.intToColor(hashcolor.val(key));
    ctx.stroke();
    ctx.font = "" + (size / 2) + "px ubuntu";
    ctx.fillStyle = "#000";
    ctx.fillText(key, val.x + size * .35, val.y + size * .65);
  }

  t1 = +new Date();

  console.log("Time:", t1 - t0);

}).call(this);
